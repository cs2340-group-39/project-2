name: CI Build and Test

on:
  push:
    branches: [ "main", "actions-tests", "actions-clean" ]
  pull_request:
    branches: [ "main", "actions-tests", "actions-clean" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
        postgres:
          image: postgres:13
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: mydatabase
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

    steps:
      # Step 1: Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Specify your Python versio n

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify your Node.js version

          #cache for speed 
      - name: Cache pip
        uses: actions/cache@v3
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

      - name: Cache npm
        uses: actions/cache@v3
        with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
              

      # Step 4: Install Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: ./workspace/backend
        run: |
          python -m venv venv
          source ./venv/bin/activate
          pip install -r requirements.txt

      # Step 5: Install Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: ./workspace/frontend
        run: npm install

      # Step 6: Build Frontend
      - name: Build Frontend
        working-directory: ./workspace/frontend
        run: npm run build

      # Step 7: Collect Static Files (if needed)
      - name: Collect Static Files
        working-directory: ./workspace/backend
        run: |
          source ./venv/bin/activate
          python manage.py collectstatic --noinput

      # Step 8: Run Migrations (if needed)
      - name: Run Migrations
        working-directory: ./workspace/backend
        run: |
          source ./venv/bin/activate
          python manage.py migrate

      - name: Run Backend Tests with Coverage
        working-directory: ./workspace/backend
        env:
            DATABASE_URL: postgres://postgres:postgres@localhost:5432/mydatabase
        run: |
            source ./venv/bin/activate
            coverage run --source='.' manage.py test
            coverage report --fail-under=80
  
      - name: Run Frontend Tests
        working-directory: ./workspace/frontend
        run: npm test

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
            name: coverage-reports
            path: |
                backend/htmlcov
                frontend/coverage
